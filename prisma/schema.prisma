// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(uuid())
  email             String   @unique
  name              String
  password_hash     String
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  is_active         Boolean  @default(true)
  subscription_tier String   @default("free") // 'free', 'pro', 'enterprise'
  
  // Billing fields
  stripe_customer_id String?
  current_period_end DateTime?
  trial_end          DateTime?
  
  // Relationships
  sites             Site[]
  api_keys          ApiKey[]
  usage_records     UsageRecord[]
  billing_events    BillingEvent[]
  activity_logs     ActivityLog[]
  
  // Indexes
  @@index([stripe_customer_id])
  @@map("users")
}

model Site {
  id                  String   @id @default(uuid())
  user_id             String
  name                String
  url                 String   @unique
  description         String?
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt
  is_active           Boolean  @default(true)
  embedding_status    String   @default("not_started") // 'not_started', 'in_progress', 'completed', 'failed'
  last_embedding_at   DateTime?
  post_count          Int      @default(0)
  chunk_count         Int      @default(0)
  
  // Relationships
  user                User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  api_keys            ApiKey[]
  usage_records       UsageRecord[]
  site_products       SiteProduct[]
  activity_logs       ActivityLog[]
  
  // Indexes
  @@index([user_id])
  @@index([url])
  @@index([embedding_status])
  @@map("sites")
}

// API Key Management
model ApiKey {
  id           String   @id @default(uuid())
  user_id      String
  site_id      String?
  name         String   // User-friendly name
  key_prefix   String   @unique // First 8 chars for display
  key_hash     String   @unique // Hashed full key
  scopes       String[] // ['search', 'embed', 'admin']
  created_at   DateTime @default(now())
  last_used_at DateTime?
  is_active    Boolean  @default(true)
  
  // Rate limiting
  rate_limit_per_hour Int @default(1000)
  
  // Relationships
  user         User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  site         Site?   @relation(fields: [site_id], references: [id], onDelete: Cascade)
  usage_records UsageRecord[]
  
  // Indexes
  @@index([user_id])
  @@index([site_id])
  @@index([key_prefix])
  @@index([last_used_at])
  @@map("api_keys")
}

// Usage Tracking & Quotas
model UsageRecord {
  id         String   @id @default(uuid())
  user_id    String
  site_id    String?
  api_key_id String?
  
  // Usage metrics
  operation_type String   // 'search', 'embed', 'site_create', etc.
  endpoint       String   // Full endpoint path
  method         String   // HTTP method
  
  // Tracking data
  timestamp      DateTime @default(now())
  response_time  Int?     // Response time in ms
  status_code    Int
  error_message  String?
  
  // Billing relevant
  billable_unit  String?  // 'search', 'chunk', 'api_call'
  unit_count     Int      @default(1)
  
  // Request metadata
  user_agent     String?
  ip_address     String?
  
  // Relationships
  user           User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  site           Site?   @relation(fields: [site_id], references: [id], onDelete: SetNull)
  api_key        ApiKey? @relation(fields: [api_key_id], references: [id], onDelete: SetNull)
  
  // Indexes
  @@index([user_id, timestamp])
  @@index([site_id, timestamp])
  @@index([api_key_id, timestamp])
  @@index([operation_type, timestamp])
  @@index([timestamp])
  @@map("usage_records")
}

// Billing & Subscription Events
model BillingEvent {
  id                String   @id @default(uuid())
  user_id           String
  
  // Stripe data
  stripe_event_id   String?  @unique
  stripe_event_type String   // 'invoice.paid', 'subscription.updated', etc.
  
  // Event details
  event_type        String   // 'subscription_created', 'payment_succeeded', 'usage_overage', etc.
  amount            Int?     // Amount in cents
  currency          String?  @default("usd")
  
  // Subscription details
  subscription_tier String?
  period_start      DateTime?
  period_end        DateTime?
  
  // Metadata
  metadata          Json?
  processed_at      DateTime @default(now())
  
  // Relationships
  user              User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  // Indexes
  @@index([user_id])
  @@index([stripe_event_id])
  @@index([event_type])
  @@index([processed_at])
  @@map("billing_events")
}

// System Metrics for Admin Analytics
model SystemMetric {
  id         String   @id @default(uuid())
  
  // Metric details
  metric_type String   // 'daily_active_users', 'total_searches', 'total_sites', etc.
  metric_date DateTime
  value       Float
  
  // Dimensions for grouping
  dimension_1 String?  // e.g., 'subscription_tier'
  dimension_2 String?  // e.g., 'operation_type'
  
  // Metadata
  metadata    Json?
  recorded_at DateTime @default(now())
  
  // Indexes
  @@unique([metric_type, metric_date, dimension_1, dimension_2])
  @@index([metric_type, metric_date])
  @@index([recorded_at])
  @@map("system_metrics")
}

// Optional: Model for tracking embedding jobs/status
model EmbeddingJob {
  id           String   @id @default(uuid())
  site_id      String
  status       String   @default("pending") // 'pending', 'processing', 'completed', 'failed'
  started_at   DateTime @default(now())
  completed_at DateTime?
  error_message String?
  posts_count  Int      @default(0)
  chunks_count Int      @default(0)
  
  // Metadata
  metadata     Json?    // Store additional job information
  
  @@index([site_id])
  @@index([status])
  @@map("embedding_jobs")
}

// Ecosystem Products (SaaS offerings)
model EcosystemProduct {
  id          String   @id @default(uuid())
  name        String   @unique
  slug        String   @unique // URL-friendly identifier
  description String
  category    String   // 'search', 'analysis', 'ai', etc.
  version     String   @default("1.0")
  is_active   Boolean  @default(true)
  is_beta     Boolean  @default(false)
  
  // Pricing info (optional)
  base_price  Float?   // Monthly base price in USD
  usage_based Boolean  @default(false) // Whether pricing includes usage components
  
  // Features/capabilities
  features    Json?    // JSON array of feature descriptions
  limits      Json?    // JSON object with usage limits per tier
  
  // Metadata
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  
  // Relationships
  site_products SiteProduct[]
  
  // Indexes
  @@index([category])
  @@index([is_active])
  @@map("ecosystem_products")
}

// Junction table for sites and their registered products
model SiteProduct {
  id           String    @id @default(uuid())
  site_id      String
  product_id   String
  
  // Status
  is_enabled   Boolean   @default(true)
  enabled_at   DateTime  @default(now())
  disabled_at  DateTime?
  
  // Configuration
  config       Json?     // Product-specific configuration
  usage_limits Json?     // Site-specific limits if different from defaults
  
  // Usage tracking
  last_used_at DateTime?
  usage_count  Int       @default(0)
  
  // Metadata
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  
  // Relationships
  site         Site             @relation(fields: [site_id], references: [id], onDelete: Cascade)
  product      EcosystemProduct @relation(fields: [product_id], references: [id], onDelete: Cascade)
  
  // Constraints
  @@unique([site_id, product_id])
  
  // Indexes
  @@index([site_id])
  @@index([product_id])
  @@index([is_enabled])
  @@map("site_products")
}

// Activity Log for Recent Activity Feed
model ActivityLog {
  id           String   @id @default(uuid())
  user_id      String
  
  // Activity details
  activity_type String   // 'user_updated', 'site_created', 'product_registered', etc.
  title        String   // Human-readable title
  description  String?  // Optional detailed description
  
  // Related entities
  site_id      String?  // If activity is site-related
  target_id    String?  // ID of the target entity (product_id, site_id, etc.)
  target_type  String?  // Type of target entity ('site', 'product', 'user', etc.)
  
  // Activity metadata
  metadata     Json?    // Additional context data
  ip_address   String?  // User's IP address
  user_agent   String?  // User's browser/client info
  
  // Timestamps
  created_at   DateTime @default(now())
  
  // Relationships
  user         User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  site         Site?    @relation(fields: [site_id], references: [id], onDelete: SetNull)
  
  // Indexes
  @@index([user_id, created_at])
  @@index([site_id, created_at])
  @@index([activity_type, created_at])
  @@index([created_at])
  @@map("activity_logs")
}
